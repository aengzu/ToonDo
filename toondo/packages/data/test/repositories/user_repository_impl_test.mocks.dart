// Mocks generated by Mockito 5.4.5 from annotations
// in data/test/repositories/user_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:data/datasources/local/user_local_datasource.dart' as _i6;
import 'package:data/datasources/remote/user_remote_datasource.dart' as _i9;
import 'package:data/models/user_model.dart' as _i7;
import 'package:domain/entities/user.dart' as _i5;
import 'package:domain/repositories/auth_repository.dart' as _i4;
import 'package:hive/hive.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_2 extends _i1.SmartFake
    implements _i4.AuthRepository {
  _FakeAuthRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_3 extends _i1.SmartFake implements _i5.User {
  _FakeUser_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDatasource extends _i1.Mock
    implements _i6.UserLocalDatasource {
  MockUserLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i7.UserModel> get userBox => (super.noSuchMethod(
        Invocation.getter(#userBox),
        returnValue: _FakeBox_0<_i7.UserModel>(
          this,
          Invocation.getter(#userBox),
        ),
      ) as _i2.Box<_i7.UserModel>);

  @override
  set userBox(_i2.Box<_i7.UserModel>? _userBox) => super.noSuchMethod(
        Invocation.setter(
          #userBox,
          _userBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> saveUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getUserNickname() => (super.noSuchMethod(
        Invocation.method(
          #getUserNickname,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> updateUserPoints(int? newPoint) => (super.noSuchMethod(
        Invocation.method(
          #updateUserPoints,
          [newPoint],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setNickName(String? newNickName) => (super.noSuchMethod(
        Invocation.method(
          #setNickName,
          [newNickName],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UserRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDatasource extends _i1.Mock
    implements _i9.UserRemoteDatasource {
  MockUserRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  set client(_i3.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_2(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i4.AuthRepository);

  @override
  _i8.Future<_i5.User> changeNickName(String? newNickName) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNickName,
          [newNickName],
        ),
        returnValue: _i8.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #changeNickName,
            [newNickName],
          ),
        )),
      ) as _i8.Future<_i5.User>);

  @override
  _i8.Future<_i5.User> updateUserPoints(int? delta) => (super.noSuchMethod(
        Invocation.method(
          #updateUserPoints,
          [delta],
        ),
        returnValue: _i8.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #updateUserPoints,
            [delta],
          ),
        )),
      ) as _i8.Future<_i5.User>);
}
