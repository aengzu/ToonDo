// Mocks generated by Mockito 5.4.5 from annotations
// in presentation/test/viewmodels/goal/goal_input_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:domain/entities/goal.dart' as _i3;
import 'package:domain/repositories/goal_repository.dart' as _i2;
import 'package:domain/usecases/goal/create_goal_remote.dart' as _i6;
import 'package:domain/usecases/goal/save_goal_local.dart' as _i8;
import 'package:domain/usecases/goal/update_goal_local.dart' as _i10;
import 'package:domain/usecases/goal/update_goal_remote.dart' as _i9;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/notification_listener.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoalRepository_0 extends _i1.SmartFake
    implements _i2.GoalRepository {
  _FakeGoalRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoal_1 extends _i1.SmartFake implements _i3.Goal {
  _FakeGoal_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i5.DiagnosticsNode {
  _FakeDiagnosticsNode_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [CreateGoalRemoteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateGoalRemoteUseCase extends _i1.Mock
    implements _i6.CreateGoalRemoteUseCase {
  MockCreateGoalRemoteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i7.Future<_i3.Goal> call(_i3.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i7.Future<_i3.Goal>.value(
              _FakeGoal_1(this, Invocation.method(#call, [goal])),
            ),
          )
          as _i7.Future<_i3.Goal>);
}

/// A class which mocks [SaveGoalLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveGoalLocalUseCase extends _i1.Mock
    implements _i8.SaveGoalLocalUseCase {
  MockSaveGoalLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i7.Future<void> call(_i3.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [UpdateGoalRemoteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalRemoteUseCase extends _i1.Mock
    implements _i9.UpdateGoalRemoteUseCase {
  MockUpdateGoalRemoteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i7.Future<void> call(_i3.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [UpdateGoalLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalLocalUseCase extends _i1.Mock
    implements _i10.UpdateGoalLocalUseCase {
  MockUpdateGoalLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i7.Future<void> call(_i3.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_2(this, Invocation.getter(#widget)),
          )
          as _i4.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_3(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i4.InheritedWidget);

  @override
  void visitAncestorElements(_i4.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i11.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DiagnosticsNode describeElement(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i5.DiagnosticsNode);

  @override
  _i5.DiagnosticsNode describeWidget(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i5.DiagnosticsNode);

  @override
  List<_i5.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i5.DiagnosticsNode>[],
          )
          as List<_i5.DiagnosticsNode>);

  @override
  _i5.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i5.DiagnosticsNode);
}
