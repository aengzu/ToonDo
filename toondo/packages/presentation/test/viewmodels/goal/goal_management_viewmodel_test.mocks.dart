// Mocks generated by Mockito 5.4.5 from annotations
// in presentation/test/viewmodels/goal/goal_management_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/entities/goal.dart' as _i5;
import 'package:domain/entities/status.dart' as _i15;
import 'package:domain/repositories/goal_repository.dart' as _i2;
import 'package:domain/usecases/goal/delete_goal_local.dart' as _i10;
import 'package:domain/usecases/goal/delete_goal_remote.dart' as _i9;
import 'package:domain/usecases/goal/get_completed_goals.dart' as _i12;
import 'package:domain/usecases/goal/get_givenup_goals.dart' as _i13;
import 'package:domain/usecases/goal/get_goals_local.dart' as _i3;
import 'package:domain/usecases/goal/get_goals_remote.dart' as _i6;
import 'package:domain/usecases/goal/get_inprogress_goals.dart' as _i11;
import 'package:domain/usecases/goal/update_goal_local.dart' as _i8;
import 'package:domain/usecases/goal/update_goal_progress.dart' as _i16;
import 'package:domain/usecases/goal/update_goal_remote.dart' as _i7;
import 'package:domain/usecases/goal/update_goal_status.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoalRepository_0 extends _i1.SmartFake
    implements _i2.GoalRepository {
  _FakeGoalRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetGoalsLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGoalsLocalUseCase extends _i1.Mock
    implements _i3.GetGoalsLocalUseCase {
  MockGetGoalsLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<List<_i5.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [GetGoalsRemoteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGoalsRemoteUseCase extends _i1.Mock
    implements _i6.GetGoalsRemoteUseCase {
  MockGetGoalsRemoteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<List<_i5.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [UpdateGoalRemoteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalRemoteUseCase extends _i1.Mock
    implements _i7.UpdateGoalRemoteUseCase {
  MockUpdateGoalRemoteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<void> call(_i5.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UpdateGoalLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalLocalUseCase extends _i1.Mock
    implements _i8.UpdateGoalLocalUseCase {
  MockUpdateGoalLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<void> call(_i5.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteGoalRemoteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteGoalRemoteUseCase extends _i1.Mock
    implements _i9.DeleteGoalRemoteUseCase {
  MockDeleteGoalRemoteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<void> call(String? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goalId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteGoalLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteGoalLocalUseCase extends _i1.Mock
    implements _i10.DeleteGoalLocalUseCase {
  MockDeleteGoalLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<void> call(String? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goalId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [GetInProgressGoalsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInProgressGoalsUseCase extends _i1.Mock
    implements _i11.GetInProgressGoalsUseCase {
  MockGetInProgressGoalsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<List<_i5.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [GetCompletedGoalsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCompletedGoalsUseCase extends _i1.Mock
    implements _i12.GetCompletedGoalsUseCase {
  MockGetCompletedGoalsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<List<_i5.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [GetGivenUpGoalsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGivenUpGoalsUseCase extends _i1.Mock
    implements _i13.GetGivenUpGoalsUseCase {
  MockGetGivenUpGoalsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<List<_i5.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [UpdateGoalStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalStatusUseCase extends _i1.Mock
    implements _i14.UpdateGoalStatusUseCase {
  MockUpdateGoalStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<bool> call(_i5.Goal? goal, _i15.Status? newStatus) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal, newStatus]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [UpdateGoalProgressUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoalProgressUseCase extends _i1.Mock
    implements _i16.UpdateGoalProgressUseCase {
  MockUpdateGoalProgressUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GoalRepository);

  @override
  _i4.Future<bool> call(_i5.Goal? goal, double? newProgress) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal, newProgress]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
