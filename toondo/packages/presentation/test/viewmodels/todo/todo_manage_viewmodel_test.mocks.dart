// Mocks generated by Mockito 5.4.5 from annotations
// in presentation/test/viewmodels/todo/todo_manage_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:domain/entities/goal.dart' as _i11;
import 'package:domain/entities/todo.dart' as _i6;
import 'package:domain/repositories/goal_repository.dart' as _i3;
import 'package:domain/repositories/todo_repository.dart' as _i2;
import 'package:domain/usecases/goal/get_goals_local.dart' as _i10;
import 'package:domain/usecases/todo/delete_todo.dart' as _i4;
import 'package:domain/usecases/todo/get_all_todos.dart' as _i7;
import 'package:domain/usecases/todo/update_todo_dates.dart' as _i9;
import 'package:domain/usecases/todo/update_todo_status.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoalRepository_1 extends _i1.SmartFake
    implements _i3.GoalRepository {
  _FakeGoalRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DeleteTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodoUseCase extends _i1.Mock implements _i4.DeleteTodoUseCase {
  MockDeleteTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i5.Future<void> call(_i6.Todo? todo) =>
      (super.noSuchMethod(
            Invocation.method(#call, [todo]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [GetAllTodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTodosUseCase extends _i1.Mock
    implements _i7.GetAllTodosUseCase {
  MockGetAllTodosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  List<_i6.Todo> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: <_i6.Todo>[],
          )
          as List<_i6.Todo>);
}

/// A class which mocks [UpdateTodoStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodoStatusUseCase extends _i1.Mock
    implements _i8.UpdateTodoStatusUseCase {
  MockUpdateTodoStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i5.Future<void> call(_i6.Todo? todo, double? status) =>
      (super.noSuchMethod(
            Invocation.method(#call, [todo, status]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [UpdateTodoDatesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodoDatesUseCase extends _i1.Mock
    implements _i9.UpdateTodoDatesUseCase {
  MockUpdateTodoDatesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i5.Future<void> call(
    _i6.Todo? todo,
    DateTime? newStartDate,
    DateTime? newEndDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [todo, newStartDate, newEndDate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [GetGoalsLocalUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGoalsLocalUseCase extends _i1.Mock
    implements _i10.GetGoalsLocalUseCase {
  MockGetGoalsLocalUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GoalRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGoalRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.GoalRepository);

  @override
  _i5.Future<List<_i11.Goal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<List<_i11.Goal>>.value(<_i11.Goal>[]),
          )
          as _i5.Future<List<_i11.Goal>>);
}
